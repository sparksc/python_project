# -*- coding:utf-8 -*-

import re
import json
from openpyxl import Workbook,load_workbook
from openpyxl.cell import column_index_from_string
from openpyxl.styles import Style, DEFAULTS as DEFAULTS_STYLE
import os

class TemplateProc(object):

    """Excel 模板处理"""
    def __init__(self, template_name=None):
        """TODO: to be defined1. """
        self.template_name = template_name
        self.template_file = None
        self.template_info = []
        self.template_re = re.compile("\{\{(?P<type>[A-Za-z]+)(?P<idx>\d+)\}\}")
        self.wb = None
        self.ws = None
        self._load_wb()
        self._get_template_info()

    def _load_wb(self):
        if self._template_file_exists():
           self.wb = load_workbook(self.template_file)

    def _template_file_exists(self):
        path = os.path.dirname(os.path.abspath(__file__))
        self.template_file  = os.path.join(path,"rpt_templates",self.template_name)
        return os.path.isfile(self.template_file)

    def _get_template_info(self):
        i = 1
        exp = None
        if self.wb:
            self.ws = self.wb.active
            for row in self.ws.rows:
                for cell in row:
                    if cell.value is not None:
                        idx = cell.value.find("exp:")
                        if idx >=0 :
                            exp = cell.value[idx+4:]
                    if cell and (isinstance(cell.value, (str, unicode))):
                        m = self.template_re.match(cell.value)
                        if m:
                            #print m.group("idx"), m.group(1)
                            self.template_info.append({'exp':exp,"dest_col":column_index_from_string(cell.column), \
                                    "dest_row":cell.row, \
                                    "src_col":int(m.group("idx"))-1, \
                                    "dest_col_style":self.ws.column_dimensions[cell.column].style, \
                                    "dest_type":m.group("type"), \
                                    "has_col_style":self.ws.column_dimensions[cell.column].style == DEFAULTS_STYLE})
                            i = i + 1

        #print "style:", str(i)

    def _get_excel(self, data):
        exp  = None
        for ti in self.template_info:
            p = '{"start_row":2,"col_num":10,"start_col":1}'
            if ti.get("exp") is not None:
                exps = ti.get("exp")
                exps  = p
                exp = json.loads(exps)
                break

        if exp is None:
            return  False

        ridx = exp["start_row"]
        rcol = exp["start_col"]
        for ri,row in enumerate(rows, start=0):
            print "**************************"
            ri = ri + ridx -1
            idx = 0
            for x in row:
                print idx + exp["start_col"], ri,x
                cell = self.ws.cell(column = idx + exp["start_col"] , row = ri ,value=x)
                idx = idx + 1
        return  True

    def get_excel(self, data):
        if self._get_excel(data): return True

        """SQS format data"""
        rows = data.get("rows")
        headers = data.get("header")
        for ti in self.template_info:
            src_col = ti.get("src_col")
            dest_type = ti.get("dest_type")
            dest_col = ti.get("dest_col")
            dest_row = ti.get("dest_row")
            dest_col_style = ti.get("dest_col_style")
            p = '{"start_row":2,"col_num":10,"start_col":1}'
            if ti.get("exp") is not None:
                exp = ti.get("exp")
                exp  = p
                exp = json.loads(exp)
                ridx = exp["start_row"]
                for ri,row in enumerate(rows, start=0):
                    print "**************************"
                    ri = ri + ridx -1
                    idx = 0
                    for x in row:
                        print idx + exp["start_col"], ri,x
                        cell = self.ws.cell(column = idx + exp["start_col"] , row = ri ,value=x)
                        idx = idx + 1
                    #for x in row:
                    #    print ri,x
                        #cell = self.ws.cell(column = dest_col,row = dest_row+ri,value=temp)
                return 

            if src_col < len(headers): 
                if dest_type and dest_type.upper() == "H":
                    _ = self.ws.cell(column = dest_col,row = dest_row,value=headers[src_col])
                if dest_type and dest_type.upper() == "C":
                    for ri,row in enumerate(rows,start=0):
                        a1 = re.compile('[\x00-\x09\x0b-\x1f\x7f]')
                        temp = a1.sub('', str(row[src_col]))
                        cell = self.ws.cell(column = dest_col,row = dest_row+ri,value=temp)
                        #self.merge_style(cell,dest_col_style)
                    #col_name = chr(ord(str(src_col)) + 17)
                    #self.ws.column_dimensions[col_name].style = dest_col_style
            else:
                _ = self.ws.cell(column = dest_col,row = dest_row,value="")

    def merge_style(self,cell,style):
        cell.style = style
        """
        if hash(cell.style.number_format) == hash(DEFAULTS_STYLE.number_format):
            cell.style.number_format = style.number_format
        if hash(cell.style.font) == hash(DEFAULTS_STYLE.font):
            cell.style.font = style.font
        if hash(cell.style.fill) == hash(DEFAULTS_STYLE.fill):
            cell.style.fill = style.fill
        # if hash(cell.style.borders) == hash(DEFAULTS_STYLE.borders):
        #     cell.style.borders = style.borders
        if hash(cell.style.alignment) == hash(DEFAULTS_STYLE.alignment):
            cell.style.alignment = style.alignment
        if hash(cell.style.protection) == hash(DEFAULTS_STYLE.protection):
            cell.style.protection = style.protection
        """

        
if __name__ == "__main__":
    tp = TemplateProc(template_name="000001.xlsx")
    print tp.template_file
    #for i in tp.template_info:
    #    print i
    
    tp.get_excel({"rows":[["xx1","xxx2",3,4,5,6,7,8,9,10],["yy2",3,4,5,6,7,8,9,10,11]],"header":["C1","C2","c3", "c4", "c5", "c6", "c7", "c8", "c9", "c10"]})
    tp.wb.save('empty_book1.xlsx')
